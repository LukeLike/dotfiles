# cat << EOF > /dev/null
# edited by Luke
# most functionalities are provided by https://github.com/gpakosz/.tmux

# -- general -----------------------------------------------------------------
set -g default-terminal "screen-256color"   # colors!
setw -g xterm-keys on
set -s escape-time 10                       # faster command sequences
set -sg repeat-time 600                     # increase repeat timeout
set -s focus-events on

set -g prefix C-a
bind C-a send-prefix

set -q -g status-utf8 on                    # expect UTF-8 (tmux < 2.2)
setw -q -g utf8 on

set -g history-limit 5000                   # boost history

# edit / reload configuration
bind e new-window -n '~/.tmux.conf' "sh -c '\${EDITOR:-vim ~/.tmux.conf && tmux source ~/.tmux.conf && tmux display \"~/.tmux.conf sourced\"'"
bind r source-file ~/.tmux.conf \; display '~/.tmux.conf sourced'

# -- display -----------------------------------------------------------------
set -g base-index 1             # start windows numbering at 1
setw -g pane-base-index 1       # make pane numbering consistent with windows

setw -g automatic-rename on     # rename window to reflect current program
set -g renumber-windows on      # renumber windows when a window is closed

set -g set-titles on            # set terminal title

set -g display-panes-time 800   # slightly longer pane indicators display time
set -g display-time 1000        # slightly longer status messages display time

set -g status-interval 10       # redraw status line every 10 seconds
set -g status-position top

# clear both screen and history
bind -n C-l send-keys C-l \; run 'sleep 0.1' \; clear-history

# activity
set -g monitor-activity on
set -g visual-activity on

# -- navigation --------------------------------------------------------------
bind C-c new-session
bind C-f command-prompt -p find-session 'switch-client -t %%'

# split window
bind - split-window -v
bind \ split-window -h

# pane navigation using (h/j/k/l)
bind -r h select-pane -L
bind -r j select-pane -D
bind -r k select-pane -U
bind -r l select-pane -R
bind > swap-pane -D
bind < swap-pane -U

# maximize current pane
bind + run 'cut -c3- ~/.tmux.conf | sh -s _maximize_pane "#{session_name}" #D'

# pane resizing
bind -r H resize-pane -L 2
bind -r J resize-pane -D 2
bind -r K resize-pane -U 3
bind -r L resize-pane -R 2

# window
unbind n
unbind p
bind -r C-h previous-window
bind -r C-l next-window
bind Tab last-window

# toggle mouse
bind m run "cut -c3- ~/.tmux.conf | sh -s _toggle_mouse"
set -g mouse on

# -- list choice (tmux < 2.4) -------------------------------------------------
# vi-choice is gone in tmux >= 2.4
run -b 'tmux bind -t vi-choice h tree-collapse 2> /dev/null || true'
run -b 'tmux bind -t vi-choice l tree-expand 2> /dev/null || true'
run -b 'tmux bind -t vi-choice K start-of-list 2> /dev/null || true'
run -b 'tmux bind -t vi-choice J end-of-list 2> /dev/null || true'
run -b 'tmux bind -t vi-choice H tree-collapse-all 2> /dev/null || true'
run -b 'tmux bind -t vi-choice L tree-expand-all 2> /dev/null || true'
run -b 'tmux bind -t vi-choice Escape cancel 2> /dev/null || true'

# -- edit mode (tmux < 2.4) ---------------------------------------------------
# vi-edit is gone in tmux >= 2.4
run -b 'tmux bind -ct vi-edit H start-of-line 2> /dev/null || true'
run -b 'tmux bind -ct vi-edit L end-of-line 2> /dev/null || true'
run -b 'tmux bind -ct vi-edit q cancel 2> /dev/null || true'
run -b 'tmux bind -ct vi-edit Escape cancel 2> /dev/null || true'

# -- vi copy mode ------------------------------------------------------------
setw -g mode-keys vi
bind-key -T copy-mode-vi 'v' send -X begin-selection
bind-key -T copy-mode-vi 'y' send -X copy-selection-and-cancel

# -- buffers -----------------------------------------------------------------
bind b list-buffers
bind p paste-buffer
bind P choose-buffer

# -- appearance --------------------------------------------------------------

status_style_fg='#8a8a8a'
status_style_bg='#080808'
message_style_fg='#000000'
message_style_bg='#e3bc8f'
window_status_style_fg='#8a8a8a'
window_status_style_bg='#080808'
window_status_format='#I #W'
window_status_current_format=' #I #W '
window_status_current_style_fg='#000000'
window_status_current_style_bg='#00afff'
window_status_last_style_fg='#00afff'
window_status_last_style_bg=default

title_string="#h ❐ #S ● #I #W"

# -- panes -------------------------------------------------------------------
set -g display-panes-colour '#00afff'
set -g display-panes-active-colour '#00afff'
set -g pane-border-style fg=colour254
set -g pane-active-border-style fg='#00afff'
# -- status line -------------------------------------------------------------
set -g message-style fg=${message_style_fg},bg=${message_style_bg},bold
set -g status-style fg=${status_style_fg},bg=${status_style_bg}
set -g set-titles-string ${title_string}
setw -g window-status-style fg=${window_status_style_fg},bg=${window_status_style_bg}
setw -g window-status-format ${window_status_format}
setw -g window-status-current-style fg=${window_status_current_style_fg},bg=${window_status_current_style_bg},bold
setw -g window-status-current-format ${window_status_current_format}
setw -g window-status-last-style fg=${window_status_last_style_fg},bg=${window_status_last_style_bg}
setw -g window-status-activity-style fg=default,bg=default,underscore
setw -g window-status-bell-style fg='#ffff00',bg=default,blink,bold

set -g status-left-length 1000
set -g status-left "#[fg=#000000,bg=#ffff00,bold] ❐ #S #[fg=#ffff00,bg=default,none] "
set -g status-right-length 1000
set -g status-right "#{?session_many_attached, 👓 ,}#{?client_prefix, ⌨ ,} #[fg=#8a8a8a,bg=#080808,none]| %R #[fg=#8a8a8a,bg=#080808,none]| %d %b #[fg=#d70000,bg=#080808,none]#[fg=#e4e4e4,bg=#d70000,none] #(cut -c3- ~/.tmux.conf | sh -s _username #{pane_tty} false #D) #[fg=#e4e4e4,bg=#d70000,none]#[fg=#000000,bg=#e4e4e4,bold] #(cut -c3- ~/.tmux.conf | sh -s _hostname #{pane_tty} false #D) "

# -- nested tmux session -----------------------------------------------------
# Press F12 to disable outer tmux, and press again to re-enable.
bind -T root F12 \
    set prefix None \;\
    set key-table off \;\
    set status-style fg=colour245,bg=colour238 \;\
    set status-left "#[fg=colour232,bg=colour254,bold] ❐ #S #[fg=colour245,bg=colour238,none] " \;\
    set status-right "#{?session_many_attached, 👓 ,}#{?client_prefix, ⌨ ,} #[fg=colour245,bg=colour238,none]| %R #[fg=colour245,bg=colour238,none]| %d %b #[fg=colour245,bg=colour238,none]#[fg=colour245,bg=colour238,none] #(cut -c3- ~/.tmux.conf | sh -s _username #{pane_tty} false #D) #[fg=colour245,bg=colour238,none]#[fg=colour245,bg=colour238,bold] #(cut -c3- ~/.tmux.conf | sh -s _hostname #{pane_tty} false #D) " \;\
    set -g window-status-style fg=colour245,bg=colour238 \;\
    set window-status-current-style fg=colour232,bg=colour254 \;\
    set -g window-status-last-style fg=colour245,bg=colour238 \;\
    set window-status-activity-style fg=colour232,bg=colour238 \;\
    refresh-client -S

bind -T off F12 \
    set -u prefix \;\
    set -u key-table \;\
    set -u status-style \;\
    set -u status-left \;\
    set -u status-right \;\
    set -g window-status-style fg=${window_status_style_fg},bg=${window_status_style_bg} \;\
    set -u window-status-current-style \;\
    set -g window-status-last-style fg=${window_status_last_style_fg},bg=${window_status_last_style_bg} \;\
    set -u window-status-activity-style \;\
    refresh-client -S

#-- load local settings ------------------------------------------------------
if '[ -f ~/.tmux.conf.local ]' 'source ~/.tmux.conf.local'

# EOF
#
# # exit the script if any statement returns a non-true return value
# set -e
#
# export LC_NUMERIC=C
#
# __newline='
# '
#
# _maximize_pane() {
#   current_session=${1:-$(tmux display -p '#{session_name}')}
#   current_pane=${2:-$(tmux display -p '#{pane_id}')}
#
#   dead_panes=$(tmux list-panes -s -t "$current_session" -F '#{pane_dead} #{pane_id} #{pane_start_command}' | grep -o '^1 %.\+maximized.\+$' || true)
#   restore=$(echo "$dead_panes" | sed -n -E -e "s/^1 $current_pane .+maximized.+'(%[0-9]+)'$/tmux swap-pane -s \1 -t $current_pane \; kill-pane -t $current_pane/p" -e "s/^1 (%[0-9]+) .+maximized.+'$current_pane'$/tmux swap-pane -s \1 -t $current_pane \; kill-pane -t \1/p" )
#
#   if [ -z "$restore" ]; then
#     [ "$(tmux list-panes -t "$current_session:" | wc -l | sed 's/^ *//g')" -eq 1 ] && tmux display "Can't maximize with only one pane" && return
#     window=$(tmux new-window -t "$current_session:" -P "exec maximized... 2> /dev/null & tmux setw -t \"$current_session:\" remain-on-exit on; printf \"Pane has been maximized, press <prefix>+ to restore. %s\" '$current_pane'")
#     window=${window%.*}
#
#     retry=10
#     while [ x"$(tmux list-panes -t "$window" -F '#{session_name}:#{window_index} #{pane_dead}' 2>/dev/null)" != x"$window 1" ] && [ "$retry" -ne 0 ]; do
#       sleep 0.05
#       retry=$((retry - 1))
#     done
#     if [ "$retry" -eq 0 ]; then
#       tmux display 'Unable to maximize pane'
#     fi
#
#     new_pane=$(tmux display -t "$window" -p '#{pane_id}')
#     tmux setw -t "$window" remain-on-exit off \; swap-pane -s "$current_pane" -t "$new_pane"
#   else
#     $restore || tmux kill-pane
#   fi
# }
# _toggle_mouse() {
#   old=$(tmux show -gv mouse)
#   new=""
#
#   if [ "$old" = "on" ]; then
#     new="off"
#   else
#     new="on"
#   fi
#
#   tmux set -g mouse $new \;\
#        display "mouse: $new"
# }
# _username() {
#   tty=${1:-$(tmux display -p '#{pane_tty}')}
#   ssh_only=$2
#   # shellcheck disable=SC2039
#   if [ x"$OSTYPE" = x"cygwin" ]; then
#     pid=$(ps -a | awk -v tty="${tty##/dev/}" '$5 == tty && /ssh/ && !/vagrant ssh/ && !/autossh/ && !/-W/ { print $1 }')
#     [ -n "$pid" ] && ssh_parameters=$(tr '\0' ' ' < "/proc/$pid/cmdline" | sed 's/^ssh //')
#   else
#     ssh_parameters=$(ps -t "$tty" -o command= | awk '/ssh/ && !/vagrant ssh/ && !/autossh/ && !/-W/ { $1=""; print $0; exit }')
#   fi
#   if [ -n "$ssh_parameters" ]; then
#     # shellcheck disable=SC2086
#     username=$(ssh -G $ssh_parameters 2>/dev/null | awk 'NR > 2 { exit } ; /^user / { print $2 }')
#     # shellcheck disable=SC2086
#     [ -z "$username" ] && username=$(ssh -T -o ControlPath=none -o ProxyCommand="sh -c 'echo %%username%% %r >&2'" $ssh_parameters 2>&1 | awk '/^%username% / { print $2; exit }')
#   else
#     if ! _is_enabled "$ssh_only"; then
#       # shellcheck disable=SC2039
#       if [ x"$OSTYPE" = x"cygwin" ]; then
#         username=$(whoami)
#       else
#         username=$(ps -t "$tty" -o user= -o pid= -o ppid= -o command= | awk '
#           !/ssh/ { user[$2] = $1; ppid[$3] = 1 }
#           END {
#             for (i in user)
#               if (!(i in ppid))
#               {
#                 print user[i]
#                 exit
#               }
#           }
#         ')
#       fi
#     fi
#   fi
#
#   echo "$username"
# }
#
# _hostname() {
#   tty=${1:-$(tmux display -p '#{pane_tty}')}
#   ssh_only=$2
#   # shellcheck disable=SC2039
#   if [ x"$OSTYPE" = x"cygwin" ]; then
#     pid=$(ps -a | awk -v tty="${tty##/dev/}" '$5 == tty && /ssh/ && !/vagrant ssh/ && !/autossh/ && !/-W/ { print $1 }')
#     [ -n "$pid" ] && ssh_parameters=$(tr '\0' ' ' < "/proc/$pid/cmdline" | sed 's/^ssh //')
#   else
#     ssh_parameters=$(ps -t "$tty" -o command= | awk '/ssh/ && !/vagrant ssh/ && !/autossh/ && !/-W/ { $1=""; print $0; exit }')
#   fi
#   if [ -n "$ssh_parameters" ]; then
#     # shellcheck disable=SC2086
#     hostname=$(ssh -G $ssh_parameters 2>/dev/null | awk 'NR > 2 { exit } ; /^hostname / { print $2 }')
#     # shellcheck disable=SC2086
#     [ -z "$hostname" ] && hostname=$(ssh -T -o ControlPath=none -o ProxyCommand="sh -c 'echo %%hostname%% %h >&2'" $ssh_parameters 2>&1 | awk '/^%hostname% / { print $2; exit }')
#     #shellcheck disable=SC1004
#     hostname=$(echo "$hostname" | awk '\
#     { \
#       if ($1~/^[0-9.:]+$/) \
#         print $1; \
#       else \
#         split($1, a, ".") ; print a[1] \
#     }')
#   else
#     if ! _is_enabled "$ssh_only"; then
#       hostname=$(command hostname -s)
#     fi
#   fi
#
#   echo "$hostname"
# }
#
# _root() {
#   tty=${1:-$(tmux display -p '#{pane_tty}')}
#   username=$(_username "$tty" false)
#
#   if [ x"$username" = x"root" ]; then
#     tmux show -gqv '@root'
#   else
#     echo ""
#   fi
# }
#
# "$@"
